// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// >>>>>>>>>>>>> WORKSPACE & RBAC (Role-Based Access Control) MODELS <<<<<<<<<<<<<<

model Workspace {
  id      Int    @id @default(autoincrement())
  name    String
  slug    String @unique
  ownerId Int
  owner   User   @relation("OwnedWorkspaces", fields: [ownerId], references: [id], onDelete: Cascade)

  // --- Back-relations for ALL workspace-specific data ---

  // ===== شروع اصلاحیه =====
  // این خط، رابطه متقابل و ضروری را به مدل Role اضافه می‌کند
  roles Role[]
  // ===== پایان اصلاحیه =====

  // ===== شروع اصلاحیه =====
  // این خط، رابطه متقابل را به مدل Permission اضافه می‌کند
  permissions Permission[]
  // ===== پایان اصلاحیه =====

  members                 WorkspaceUser[]
  requests                Request[]
  invoices                Invoice[]
  payments                Payment[]
  products                Product[]
  brands                  Brand[]
  categories              Category[]
  statuses                Status[]
  deviceTypes             DeviceType[]
  receivedDevices         ReceivedDevice[]
  serviceTypes            ServiceType[]
  actualServices          ActualService[]
  forms                   Form[]
  labels                  Label[]
  userGroups              UserGroup[]
  reminders               Reminder[]
  notifications           Notification[]
  attributes              Attribute[]
  warranties              Warranty[]
  fields                  Field[]
  formSubmissions         FormSubmission[]
  notes                   Note[]
  invoiceItems            InvoiceItem[]
  reviews                 Review[]
  expertReviews           ExpertReview[]
  requestAttachments      RequestAttachment[]
  requestStatusHistories  RequestStatusHistory[]
  requestReviews          RequestReview[]
  requestCancellations    RequestCancellation[]
  actualServicesOnRequest ActualServiceOnRequest[]
  productImages           ProductImage[]
  productAttributes       ProductAttribute[]
  productVariants         ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkspaceUser {
  workspaceId Int
  userId      Int
  roleId      Int

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id])

  @@id([workspaceId, userId])
}

model Role {
  id Int @id @default(autoincrement())

  // ===== شروع اصلاحات =====
  workspaceId Int // ۱. این فیلد برای اتصال به ورک‌اسپیس اضافه شد
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade) // ۲. این رابطه برای اتصال به ورک‌اسپیس اضافه شد
  // ===== پایان اصلاحات =====

  name        String
  description String?
  permissions RolePermission[]
  users       WorkspaceUser[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  // name @unique // <-- این خط باید حذف شود
  // ===== پایان اصلاحات =====

  // ===== شروع اصلاحات =====
  // ۳. نام نقش اکنون باید در هر ورک‌اسپیس یکتا باشد، نه در کل سیستم
  @@unique([name, workspaceId])
}

model Permission {
  id Int @id @default(autoincrement())

  // ===== شروع اصلاحیه =====
  workspaceId Int // ۱. این فیلد برای اتصال به ورک‌اسپیس اضافه شد
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade) // ۲. این رابطه اضافه شد
  // ===== پایان اصلاحیه =====

  action      String           @unique
  description String?
  module      String
  roles       RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  // action @unique // <-- این خط باید حذف شود
  // ===== پایان اصلاحیه =====

  // ===== شروع اصلاحیه =====
  // نام دسترسی (action) اکنون باید در هر ورک‌اسپیس یکتا باشد
  @@unique([action, workspaceId])
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

// >>>>>>>>>>>>> CORE MODELS (Refactored for Workspace) <<<<<<<<<<<<<<

model User {
  id        Int      @id @unique @default(autoincrement())
  name      String?
  email     String?  @unique
  phone     String   @unique
  password  String?
  address   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  otp        String?
  otpExpires DateTime?

  ownedWorkspaces Workspace[]     @relation("OwnedWorkspaces")
  workspaces      WorkspaceUser[]

  requests             Request[]
  requestsAssigned     Request[]              @relation(name: "AssignedTo")
  notifications        Notification[]
  reminders            Reminder[]
  RequestCancellation  RequestCancellation[]
  RequestReview        RequestReview[]
  RequestStatusHistory RequestStatusHistory[]
  payments             Payment[]
  invoices             Invoice[]
  reviews              Review[]
  receivedDevices      ReceivedDevice[]

  // ++ Explicit many-to-many relations ++
  labels     UserLabel[]
  userGroups UserGroupMember[]
}

model Request {
  id             Int          @id @unique @default(autoincrement())
  workspaceId    Int
  workspace      Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId         Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  description    String       @db.Text
  serviceTypeId  Int?
  serviceType    ServiceType? @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)
  address        String?
  preferredDate  DateTime?
  preferredTime  DateTime?
  note           String?
  statusId       Int?
  status         Status?      @relation(fields: [statusId], references: [id], onDelete: Cascade)
  priority       String       @default("متوسط")
  assignedToId   Int?
  assignedTo     User?        @relation(name: "AssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull, map: "Request_assignedTo_fkey")
  estimatedPrice Float?
  actualPrice    Float?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  completedAt    DateTime?
  trackingCode   String?

  actualServices   ActualServiceOnRequest[]
  receivedDevice   ReceivedDevice?
  notes            Note[]
  invoices         Invoice[]
  notifications    Notification[]
  attachments      RequestAttachment[]
  statusHistory    RequestStatusHistory[]
  reviews          RequestReview[]
  cancellations    RequestCancellation[]
  formSubmission   FormSubmission?          @relation(fields: [formSubmissionid], references: [id])
  formSubmissionid Int?
}

model Invoice {
  id          Int       @id @unique @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  requestId   Int?
  request     Request?  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull, map: "Invoice_userId_fkey")

  items           InvoiceItem[]
  type            InvoiceType   @default(SALES)
  subtotal        Float         @default(0)
  tax             Float         @default(0)
  taxPercent      Float         @default(0)
  discount        Float         @default(0)
  discountPercent Float         @default(0)
  total           Float
  status          InvoiceStatus @default(PENDING)
  dueDate         DateTime?
  description     String?       @db.Text
  paymentDate     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  payments        Payment[]
}

model Product {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  price       Float

  description   String?
  blog          Json?
  stock         Int                @default(0)
  warrantyId    Int?
  isActive      Boolean            @default(false)
  warranty      Warranty?          @relation(fields: [warrantyId], references: [id], onDelete: SetNull)
  categoryId    Int?
  category      Category?          @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  brandId       Int?
  brand         Brand?             @relation(fields: [brandId], references: [id], onDelete: SetNull)
  attributes    ProductAttribute[]
  variants      ProductVariant[]
  reviews       Review[]
  expertReviews ExpertReview[]
  images        ProductImage[]
  InvoiceItem   InvoiceItem[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model Brand {
  id              Int              @id @default(autoincrement())
  workspaceId     Int
  workspace       Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name            String
  logoUrl         String?
  website         String?
  description     String?
  products        Product[]
  receivedDevices ReceivedDevice[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([name, workspaceId])
}

model Category {
  id          Int        @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  slug        String
  description String?
  parentId    Int?
  lft         Int        @default(0)
  rgt         Int        @default(0)
  depth       Int        @default(0)
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: Cascade)
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([slug, workspaceId])
}

model Status {
  id                      Int                    @id @unique @default(autoincrement())
  workspaceId             Int
  workspace               Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name                    String
  color                   String
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  requests                Request[]
  isLock                  Boolean                @default(false)
  RequestStatusHistoryNew RequestStatusHistory[] @relation(name: "newStatus")
  RequestStatusHistoryOld RequestStatusHistory[] @relation(name: "oldStatus")

  @@unique([name, workspaceId])
}

model DeviceType {
  id              Int              @id @default(autoincrement())
  workspaceId     Int
  workspace       Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name            String
  description     String?          @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  receivedDevices ReceivedDevice[]

  @@unique([name, workspaceId])
}

model ReceivedDevice {
  id                 Int        @id @default(autoincrement())
  workspaceId        Int
  workspace          Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  model              String?
  serialNumber       String?
  receivedDate       DateTime   @default(now())
  problemDescription String     @db.Text
  initialCondition   String     @db.Text
  notes              String?    @db.Text
  isDelivered        Boolean    @default(false)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deviceTypeId       Int
  deviceType         DeviceType @relation(fields: [deviceTypeId], references: [id])
  brandId            Int
  brand              Brand      @relation(fields: [brandId], references: [id])
  userId             Int
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  requestId          Int?       @unique
  request            Request?   @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model ServiceType {
  id             Int             @id @unique @default(autoincrement())
  workspaceId    Int
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name           String
  description    String?         @db.Text
  basePrice      Float           @default(0)
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  requests       Request[]
  actualServices ActualService[]

  @@unique([name, workspaceId])
}

model ActualService {
  id            Int                      @id @default(autoincrement())
  workspaceId   Int
  workspace     Workspace                @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name          String
  price         Float
  description   String?                  @db.Text
  serviceTypeId Int
  serviceType   ServiceType              @relation(fields: [serviceTypeId], references: [id])
  requests      ActualServiceOnRequest[]
  invoiceItems  InvoiceItem[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
}

model Form {
  id          Int              @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  description String?          @db.Text
  isActive    Boolean          @default(true)
  fields      FieldOnForm[]
  submissions FormSubmission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([name, workspaceId])
}

model Label {
  id          Int         @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  color       String      @default("primary")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       UserLabel[]

  @@unique([name, workspaceId])
}

model UserGroup {
  id          Int               @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  description String?           @db.Text
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  users       UserGroupMember[]

  @@unique([name, workspaceId])
}

model UserLabel {
  userId  Int
  labelId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  label   Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([userId, labelId])
}

model UserGroupMember {
  userId      Int
  userGroupId Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userGroup   UserGroup @relation(fields: [userGroupId], references: [id], onDelete: Cascade)

  @@id([userId, userGroupId])
}

model Attribute {
  id           Int                @id @default(autoincrement())
  workspaceId  Int
  workspace    Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name         String
  type         String
  options      String?
  isComparable Boolean            @default(true)
  products     ProductAttribute[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@unique([name, workspaceId])
}

model Warranty {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  duration    Int
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Reminder {
  id                   Int                 @id @default(autoincrement())
  workspaceId          Int
  workspace            Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  title                String
  description          String?             @db.Text
  dueDate              DateTime
  status               ReminderStatus      @default(PENDING)
  type                 String
  entityId             Int?
  entityType           String?
  userId               Int
  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Reminder_userId_fkey")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  notified             Boolean             @default(false)
  lastNotified         DateTime?
  repeatInterval       String?
  notificationChannels NotificationChannel @default(ALL)
  timezone             String              @default("UTC")
  retryCount           Int?                @default(0)
  lastRetry            DateTime?
}

model Notification {
  id          Int       @id @unique @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Notification_userId_fkey")

  requestId Int?
  request   Request? @relation(fields: [requestId], references: [id], onDelete: SetNull)
  title     String
  note      String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  sendSms   Boolean  @default(true)
  sendEmail Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceItem {
  id              Int             @id @unique @default(autoincrement())
  workspaceId     Int
  workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invoiceId       Int
  invoice         Invoice         @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  itemType        InvoiceItemType @default(SERVICE)
  actualServiceId Int?
  actualService   ActualService?  @relation(fields: [actualServiceId], references: [id])
  productId       Int?
  product         Product?        @relation(fields: [productId], references: [id])
  description     String
  quantity        Int
  price           Float
  discount        Float           @default(0)
  discountPercent Float           @default(0)
  tax             Float           @default(0)
  taxPercent      Float           @default(0)
  total           Float
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Payment {
  id          Int           @id @unique @default(autoincrement())
  workspaceId Int
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      Int?
  user        User?         @relation(fields: [userId], references: [id], onDelete: SetNull, map: "Payment_userId_fkey")
  invoiceId   Int?
  invoice     Invoice?      @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  amount      Float
  type        PaymentType   @default(RECEIVE)
  reference   String?
  status      PaymentStatus @default(PENDING)
  method      PaymentMethod @default(CARD)
  paidAt      DateTime?
  description String?       @db.Text
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Field {
  id           Int           @id @default(autoincrement())
  workspaceId  Int
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name         String
  label        String        @default("برچسپ")
  type         FieldType     @default(text)
  placeholder  String?
  required     Boolean       @default(false)
  options      FieldOption[]
  validation   String?
  defaultValue String?
  order        Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  forms        FieldOnForm[]

  @@unique([name, workspaceId])
}

model FieldOnForm {
  formId  Int
  fieldId Int
  form    Form  @relation(fields: [formId], references: [id], onDelete: Cascade)
  field   Field @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@id([formId, fieldId])
}

model FieldOption {
  id        Int      @id @default(autoincrement())
  fieldId   Int
  field     Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  label     String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FormSubmission {
  id          Int                   @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  formId      Int
  form        Form                  @relation(fields: [formId], references: [id], onDelete: Cascade)
  values      FormSubmissionValue[]
  data        Json
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  requests    Request[]
}

model FormSubmissionValue {
  id           Int            @id @default(autoincrement())
  submissionId Int
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  value        String
}

model ProductImage {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  productId   Int?
  product     Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  alt         String?
  isPrimary   Boolean   @default(false)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductAttribute {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  productId   Int
  attributeId Int
  value       String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductVariant {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku         String?   @unique
  price       Float
  stock       Int       @default(0)
  attributes  Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      Int
  rating      Float
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User      @relation(fields: [userId], references: [id], map: "Review_userId_fkey")
}

model ExpertReview {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  author      String
  rating      Float
  pros        Json
  cons        Json
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model RequestAttachment {
  id          Int       @id @unique @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  requestId   Int
  request     Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  fileUrl     String
  fileType    String
  uploadedAt  DateTime  @default(now())
}

model RequestStatusHistory {
  id          Int       @id @unique @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  requestId   Int
  request     Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  oldStatusId Int?
  oldStatus   Status?   @relation(name: "oldStatus", fields: [oldStatusId], references: [id], onDelete: SetNull)
  newStatusId Int
  newStatus   Status    @relation(name: "newStatus", fields: [newStatusId], references: [id], onDelete: Cascade)
  changedById Int
  changedBy   User      @relation(fields: [changedById], references: [id], onDelete: Cascade, map: "RequestStatusHistory_changedById_fkey")
  changedAt   DateTime  @default(now())
}

model RequestReview {
  id          Int       @id @unique @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  requestId   Int
  request     Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "RequestReview_userId_fkey")
  rating      Int
  comment     String?   @db.Text
  createdAt   DateTime  @default(now())
}

model RequestCancellation {
  id            Int       @id @unique @default(autoincrement())
  workspaceId   Int
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  requestId     Int
  request       Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  cancelledById Int
  cancelledBy   User      @relation(fields: [cancelledById], references: [id], onDelete: Cascade, map: "RequestCancellation_cancelledById_fkey")
  reason        String    @db.Text
  cancelledAt   DateTime  @default(now())
}

model Note {
  id          Int       @id @unique @default(autoincrement())
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  requestId   Int
  request     Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ActualServiceOnRequest {
  id              Int           @id @default(autoincrement())
  workspaceId     Int
  workspace       Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  quantity        Int           @default(1)
  price           Float
  requestId       Int
  request         Request       @relation(fields: [requestId], references: [id], onDelete: Cascade)
  actualServiceId Int
  actualService   ActualService @relation(fields: [actualServiceId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([requestId, actualServiceId])
}

// >>>>>>>>>>>>> ENUMS <<<<<<<<<<<<<<

enum ReminderStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

enum NotificationChannel {
  SMS
  EMAIL
  IN_APP
  ALL
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELED
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELED
}

enum InvoiceType {
  SALES
  PURCHASE
  PROFORMA
  RETURN_SALES
  RETURN_PURCHASE
}

enum PaymentType {
  RECEIVE
  PAY
}

enum InvoiceItemType {
  SERVICE
  PRODUCT
  CUSTOM
}

enum FieldType {
  text
  number
  boolean
  select
  multi_select
  date
  file
}

enum LabelColor {
  primary
  accent
  secondary
  warning
  success
  neutral
  info
}
